.\" @(#)$Id: oscope.1,v 1.11 1996/10/06 05:44:43 twitham Rel1_2 $
.\"
.\" Copyright (C) 1996 Tim Witham <twitham@pcocd2.intel.com>
.\"
.\" (see the files README and COPYING for more details)

.TH OSCOPE 1 "October  6  1996" "Linux" "User Commands"
.SH NAME
oscope xoscope \- Digital Oscilloscope for /dev/dsp
.SH SYNOPSIS
oscope [oscope options] [file]
.br
xoscope [X toolkit options] [oscope options] [file]

.SH DESCRIPTION

.B Oscope
is a digital real-time oscilloscope. It graphically displays amplitude
as a function of time. The input is via a sound card using the kernel
sound device /dev/dsp.

.PP
.SH "RUN\-TIME CONTROLS"
.PP

.B Oscope
is an interactive program and can be completely controlled from the
keyboard at run-time.  In verbose help mode, each available key is
shown on the screen in (parentheses), assuming your
.B oscope
can display text (see
.B Limitations
below).  The following single key commands are available:

.TP 0.5i
.B ?
Toggle verbose help key display mode.  This has no effect if your
.B oscope
can't display text.

.TP 0.5i
.B Escape
Immediately quit the program.

.TP 0.5i
.B @
Load a previously saved file.  You are prompted for the filename
unless your
.B oscope
can't display text.  In that case, the filename used is the one given
on the command line, or a default name.

.TP 0.5i
.B #
Save current settings and memory buffers to a file that can be loaded
later.  If your
.B oscope
can display text, you are prompted for the filename and asked for
confirmation to overwrite if it already exists.  Otherwise,
.B oscope
unconditionally overwrites the filename given on the command line, or
a default name.

.TP 0.5i
.B Enter
Clear and refresh the entire screen.

.TP 0.5i
.B Space
Cycle the sampling mode: run, wait, stop.  Run mode continuously
acquires and displays samples after trigger events.  Wait mode waits
for the first trigger event and displays only the first set of
samples; this is "single-shot" mode.  Stop mode suspends the data
acquisition and displays the current samples.

.TP 0.5i
.B !
Cycle the plotting mode: point, point accumulate, line, or line
accumulate.  In the accumulate modes, all samples stay on the screen;
use
.B Enter
to clear them.

.TP 0.5i
.B 9/0
Increase/decrease the Sec/Div horizontal time scale.

.TP 0.5i
.B -/=
Decrease/increase the trigger level.

.TP 0.5i
.B _
Toggle the trigger channel: 1 or 2.

.TP 0.5i
.B +
Cycle the trigger type: automatic, rising edge, or falling edge.

.TP 0.5i
.B &
Cycle the graticule style: none, minor divisions only, or minor and
major divisions.

.TP 0.5i
.B *
Toggle the graticule position: behind or in front of the signals.

.TP 0.5i
.B (/)
Decrease/increase the graticule color.

.TP 0.5i
.B ,/.
Decrease/increase the DMA divisor.  Higher values will usually give
the fastest display rate.

.TP 0.5i
.B 1\-8
Select the corresponding channel.  Auto-measurements are displayed.
Channel 1 and 2 are always the Left and Right sound channels, as
controlled by an external mixer program.  Channel 3 through 8 are
software channels that can each display a math function or the
contents of one of 26 memory buffers.  The remaining single key
commands operate on the currently selected channel:

.TP 0.5i
.B Tab
Toggle visibility: Hide or show the selected channel.

.TP 0.5i
.B {/}
Decrease/Increase vertical position of the selected channel.

.TP 0.5i
.B [/]
Decrease/Increase vertical scale of the selected channel.

.TP 0.5i
.B ;/:
Increase/Decrease the math function of the selected channel.  Not
available on channel 1 & 2.

.TP 0.5i
.B $
Show the result of an external math command on the selected channel.
You are prompted for the command.  The command must accept samples of
channel 1 & 2 on stdin and write a new signal to stdout.  See operl
and offt.c in the distribution for examples of external math filter
commands.  Not available on channel 1 & 2 or if your
.B oscope
can't display text.

.TP 0.5i
.B A-Z
Store the currently selected channel into the corresponding memory
buffer.  This is only available when the sampling rate is 44000.

.TP 0.5i
.B a-z
Recall the corresponding memory buffer onto the currently selected
channel.  Not available on channel 1 & 2.

.PP
.SH "MOUSE CONTROLS"
.B Xoscope
adds mouse controls around the edges of the scope area.  These are
color coded and should be self-explanatory.  They perform the same
functions as the equivalent keyboard commands above.

.PP
.SH "COMMAND\-LINE OPTIONS"

All these options may also be capitalized in case they conflict with
an X toolkit option.

.TP 0.5i
.B -h
Produce a Help usage message showing these startup options with their
default values, then exit.

.TP 0.5i
.B -# <code>
Specify the startup conditions of each channel.  # is a channel number
from 1 to 8.  Code can have up to four fields, separated by colons:
position[:scale[:function #, memory letter, or external command]].
Position is the number of pixels above (positive) or below (negative)
the center of the display.  Scale is a valid scaling factor from 1/200
to 200, expressed as a fraction.  The third field may contain a
built-in math function number, memory letter, or external math command
to run on the channel.  This field doesn't affect channel 1 & 2.
Using these options makes the channel visible unless position begins
with a '+', in which case the channel is hidden.

.TP 0.5i
.B -a <channel>
Specify the selected, or Active, channel.

.TP 0.5i
.B -r <rate>
Specify the sampling Rate in samples per second.  Current valid values
are 8800, 22000, or 44000.

.TP 0.5i
.B -s <scale>
Sets the time Scale factor, 1, 2, 5, 10, 20, 100, or 200.

.TP 0.5i
.B -t <trigger>
Sets the initial Trigger conditions.  Trigger can have up to three
fields, separated by colons: position[:type[:channel]].  Position is
the number of pixels above (positive) or below (negative) the center
of the display.  Type is a number indicating the kind of trigger, 0 =
automatic, 1 = rising edge, 2 = falling edge.  Channel should be 1 or
2.

.TP 0.5i
.B -c <color>
Sets the graticule Color, 0 - 15.

.TP 0.5i
.B -m <mode>
Sets the graphics Mode to use on the console.  For
.B xoscope,
use the more flexible -geometry instead.  0 = 640x480x16, 1 =
800x600x16, 2 = 1024x768x16, 3 = 1280x1024x16.
.B WARNING:
not all modes are supported by all video cards; don't use unsupported
modes!

.TP 0.5i
.B -d <dma divisor>
Sets the Divisor for DMA buffer size, 1, 2, or 4.  The kernel sound
driver will divide it's DMA buffer by this factor.  The value 4
usually gives the fastest display rate.

.TP 0.5i
.B -f
Font to use.  For
.B oscope,
these are listed in /usr/lib/kbd/consolefonts.  For
.B xoscope,
they're the output of xlsfonts.  The default should work best.

.TP 0.5i
.B -p <type>
Plot type.  0 = point, 1 = point accumulate, 2 = line, 3 = line
accumulate.

.TP 0.5i
.B -g <style>
Graticule style.  0 = none, 1 = minor divisions only, 2 = minor and
major divisions.

.TP 0.5i
.B -b
Whether the graticule is drawn Behind or in front of the signals.

.B file
The name of a file to load upon startup.  This should be a file
previously saved by 
.B oscope.

.SH EXAMPLES
.TP 0.5i
.B oscope -1 80 -2 -80 -3 0:1/5:6 -4 -160:1/5:7

This runs
.B oscope
with channel 1 above and channel 2 below the center of the display.
Also channel 3 and 4 are made visible to show the FFT of channel 1 and
2 respectively at a reduced scale of 1/5.

.TP 0.5i
.B xoscope oscope.dat

This runs xoscope, loading settings and memory buffers from a
previously saved data file called "oscope.dat".

.SH FILES
.B Oscope
creates readable text data files.  The files contain at least a
comment header which holds the current settings of
.B oscope.
Loading the file causes these saved settings to be restored.

To record your signals permanently first store them into memory
buffers, optionally recall them to channels, and then save the file.
All non-empty memory buffers are written to a column of the file
following the comment header.  Columns are separated by tab
characters.  These are stored back into the memory buffers when the
file is later loaded.  Simply recall them to channels to view them.
.P

This format could also be read by some spreadsheet or plotting
programs.  For example, the
.B gnuplot (1)
command
.P

plot "oscope.dat" using 0:1, "oscope.dat" using 0:2
.P

would plot the first and second columns of the "oscope.dat" data file.

.SH ENVIRONMENT

.TP 0.5i
.B OSCOPEPATH
The path to use when looking for external math commands.  If unset,
the built-in default is used.

.SH LIMITATIONS
.B Oscope
was written specifically for Linux, and uses the Linux sound driver
and svgalib or libsx plotting routines.  You need a sound card capable
of 44000 Hz sampling via the Linux kernel sound drivers.  If
.B oscope
was built without libvgamisc or libsx, then it won't be able to
display any text which will make it difficult to use.

Because it uses svgalib,
.B oscope
must be run as root or be setuid to root.
.B xoscope
doesn't have this restriction.

You must use an external mixer program to select the input source
device, level, etc.  Since these unknowns affect the amplitude, there
is no reference to voltage on the Y axis; it is in fact, unknown.
Instead you're given the scale in pixels per sample unit.

The display may not be able to keep up if you give it too much to
plot, depending on your sound card, graphics card, and processor
speed.  External math commands are particularly expensive since the
kernel must then split the available CPU cycles across multiple
processes.  Floating point math is used only by the FFT, so a math
coprocessor shouldn't make much difference.  To maximize refresh
speed, hide all unneeded channels, use point or point accumulate mode,
zoom in on Sec/Div as much as possible, and turn off the graticule.

The automatic measurements count zero crossings and divide to
determine the frequency and period.  If these zero crossings are not
"regularly-periodic", these measurements could be invalid.  It also
understands how to measure the built-in FFT functions by locating the
peak frequency.

Your sound card is most-likely AC coupled so you will never see any DC
offset.  You probably can't get DC coupling by just shorting the input
capacitors on your sound card.

.SH BUGS
Probably.

.SH AUTHOR
.B Oscope
was written by Tim Witham (twitham@pcocd2.intel.com), based on the
original "scope" by Jeff Tranter (Jeff_Tranter@Mitel.COM).
.B Oscope
is released under the conditions of the GNU General Public License.
See the files README and COPYING in the distribution for details.
